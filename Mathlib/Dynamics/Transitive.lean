/-
Copyright (c) 2025 Daniel Figueroa. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Daniel Figueroa
-/
import Mathlib.Dynamics.Minimal

/-!
# Point transitive action of a group

In this file we define an action of a monoid `M` on a topological space `Œ±` to be
*point transitive* if there exists a point in `Œ±` with dense `M`-orbit. We also provide an
additive version of this definition and prove some basic facts about point transitive
actions.

## TODO

* Define the set of transitive points

## Tags

group action, point transitive
-/


open Pointwise TopologicalSpace Filter
open scoped Topology

/-- An action of an additive monoid `M` on a topological space is called *point transitive* if there
exists a point `x : Œ± ` with dense `M`-orbit. -/
class AddAction.IsPointTransitive (M Œ± : Type*) [AddMonoid M] [TopologicalSpace Œ±] [AddAction M Œ±] :
    Prop where exists_dense_orbit : ‚àÉ x : Œ±, Dense (AddAction.orbit M x)

/-- An action of a monoid `M` on a topological space is called *point transitive* if there exists a
point `x : Œ±` with dense `M`-orbit. -/
@[to_additive]
class MulAction.IsPointTransitive (M Œ± : Type*) [Monoid M] [TopologicalSpace Œ±]
    [MulAction M Œ±] : Prop where
  exists_dense_orbit : ‚àÉ x : Œ±, Dense (MulAction.orbit M x)

/-- An action of an additive monoid `M` on a topological space `Œ±` is called
*topologically transitive* if for any pair of nonempty open sets `U` and `V` in `Œ±` there exists an
`m : M` such that `(m +·µ• U ) ‚à© V` is nonempty. -/
class AddAction.IsTopologicallyTransitive (M Œ± : Type*) [AddMonoid M] [TopologicalSpace Œ±]
    [AddAction M Œ±] : Prop where
  nonempty_inter : ‚àÄ {U V : Set Œ±}, IsOpen U ‚Üí IsOpen V ‚Üí U.Nonempty ‚Üí V.Nonempty ‚Üí
    ‚àÉ m : M, ((m +·µ• U) ‚à© V).Nonempty

/-- An action of a monoid `M` on a topological space `Œ±` is called *topologically transitive* if for
any pair of nonempty open sets `U` and `V` in `Œ±` there exists an `m : M` such that `(m ‚¨ù U ) ‚à© V`
is nonempty. -/
@[to_additive]
class MulAction.IsTopologicallyTransitive (M Œ± : Type*) [Monoid M] [TopologicalSpace Œ±]
    [MulAction M Œ±] : Prop where
  nonempty_inter : ‚àÄ ‚¶ÉU V : Set Œ±‚¶Ñ, IsOpen U ‚Üí IsOpen V ‚Üí U.Nonempty ‚Üí V.Nonempty ‚Üí
    ‚àÉ m : M, ((m ‚Ä¢ U) ‚à© V).Nonempty

open MulAction Set

/-- Given a monoid action on a topological space `Œ±`, a point `x` is said to be *transitive* if the
-- orbit of `x` under `M` is dense in `Œ±`. -/
@[to_additive]
def MulAction.transitivePoints (M : Type*) (Œ± : Type*) [Monoid M] [TopologicalSpace Œ±]
    [MulAction M Œ±] : Set Œ± := {x : Œ± | Dense (orbit M x)}

variable (M G : Type*) {Œ± : Type*} [Monoid M] [Group G] [TopologicalSpace Œ±] [MulAction M Œ±]
  [MulAction G Œ±]

/-- A monoid action on `Œ±` is topologically transitive if and only if the image of any non-empty
open subset of `Œ±` is dense in `Œ±`. -/
@[to_additive]
theorem isTopologicallyTransitive_iff_dense_iUnion_smul_of_isOpen_nonempty :
    IsTopologicallyTransitive M Œ± ‚Üî
    ‚àÄ {U : Set Œ±}, IsOpen U ‚Üí U.Nonempty ‚Üí Dense (‚ãÉ m : M, m ‚Ä¢ U) := by
  constructor
  simp [dense_iff_inter_open]
  refine (fun h U hoU hneU V hoV hneV ‚Ü¶ ?_)
  #check (h.nonempty_inter hoU hoV hneU hneV)
  simp [h.nonempty_inter hoU hoV hneU hneV]

/-- A monoid action on `Œ±` is topologically transitive if and only if every proper closed invariant
subset of `Œ±` has empty interior. -/
@[to_additive]
theorem isTopologicallyTransitive_iff_empty_interior_of_isClosed_invariant_smul :
    IsTopologicallyTransitive M Œ± ‚Üî ‚àÄ {s : Set Œ±}, IsClosed s ‚Üí (‚àÄ m : M, m ‚Ä¢ s ‚äÜ s) ‚Üí
      s ‚â† (Set.univ : Set Œ±) ‚Üí interior s = ‚àÖ :=
  sorry

/-- If `Œ±` has no isolated points, then any point transitive monoid action on `Œ±` is topologically
transitive. -/
@[to_additive]
theorem MulAction.IsPointTransitive.IsTopologicallyTransitive [h : ‚àÄ x : Œ±, NeBot (ùìù[‚â†] x)] :
    IsPointTransitive M Œ± ‚Üí IsTopologicallyTransitive M Œ± :=
  sorry

/-- If `Œ±` is a separable Baire space, then any topologically transitive monoid action on `Œ±` is
point transitive. -/
@[to_additive]
theorem MulAction.IsTopologicallyTransitive.IsPointTransitive_smul [SeparableSpace Œ±]
    [BaireSpace Œ±] : IsTopologicallyTransitive M Œ± ‚Üí IsPointTransitive M Œ± :=
  sorry

/-- A point transitive group action is topologically transitive -/
@[to_additive]
theorem thmname2_smul : IsPointTransitive G Œ± ‚Üí IsTopologicallyTransitive G Œ± := sorry

@[to_additive]
theorem MulAction.mem_transitivePoints_iff (x : Œ±) :
    x ‚àà transitivePoints M Œ± ‚Üî Dense (orbit M x) := by rfl

@[to_additive]
theorem MulAction.exists_dense_orbit [IsPointTransitive M Œ±] : ‚àÉ x : Œ±, Dense (orbit M x) :=
  MulAction.IsPointTransitive.exists_dense_orbit

@[to_additive]
theorem MulAction.isPointTransitive_iff : IsPointTransitive M Œ± ‚Üî Nonempty (transitivePoints M Œ±) :=
  ‚ü®fun h ‚Ü¶ by simp [transitivePoints, exists_dense_orbit M], fun hne ‚Ü¶ ‚ü®nonempty_subtype.mp hne‚ü©‚ü©

@[to_additive]
instance MulAction.instNonemptyTransitivePoints [IsPointTransitive M Œ±] :
    Nonempty (transitivePoints M Œ±) := (MulAction.isPointTransitive_iff M).mp (by assumption)

@[to_additive]
theorem MulAction.mem_transitivePoints [IsMinimal M Œ±] (x : Œ±) : x ‚àà transitivePoints M Œ± :=
  dense_orbit M x

@[to_additive]
theorem MulAction.isMinimal_iff_univ : IsMinimal M Œ± ‚Üî transitivePoints M Œ± = univ :=
  Iff.trans ‚ü®fun _ ‚Ü¶ dense_orbit M, fun h ‚Ü¶ ‚ü®h‚ü©‚ü© (eq_univ_iff_forall).symm

@[to_additive]
theorem MulAction.transitivePoints_smul :
    ‚àÄ c : G, transitivePoints G Œ± = c ‚Ä¢ transitivePoints G Œ± := by
  intro c
  unfold transitivePoints
  ext x
  constructor
  ¬∑ intro h
    refine mem_smul_set.mpr ?_
    use c‚Åª¬π ‚Ä¢ x
    simpa only [mem_setOf_eq, orbit_smul, smul_inv_smul, and_true]
  ¬∑ intro h
    rcases h with ‚ü®y, hy, hyx‚ü©
    simp_all only [mem_setOf_eq, ‚Üê orbit_smul c y]

@[to_additive]
theorem exists_denseRange_smul [IsPointTransitive M Œ±] : ‚àÉ x : Œ±, DenseRange fun c : M ‚Ü¶ c ‚Ä¢ x :=
  MulAction.exists_dense_orbit M

@[to_additive]
instance (priority := 100) MulAction.isPointTransitive_of_minimal [IsMinimal M Œ±] [Nonempty Œ±] :
    IsPointTransitive M Œ± :=
  (isPointTransitive_iff M).mpr ((inferInstance : Nonempty Œ±).elim fun x ‚Ü¶ ‚ü®x, dense_orbit M x‚ü©)

@[to_additive]
instance (priority := 100) MulAction.isPointTransitive_of_transitive [IsPretransitive M Œ±]
    [Nonempty Œ±] : IsPointTransitive M Œ± := isPointTransitive_of_minimal M

@[to_additive]
theorem exists_smul_mem [IsPointTransitive M Œ±] :
    ‚àÉ x : Œ±, ‚àÄ {U}, IsOpen U ‚Üí U.Nonempty ‚Üí ‚àÉ c : M, c ‚Ä¢ x ‚àà U :=
  (exists_denseRange_smul M).imp (fun _ g _ hUo hne ‚Ü¶ DenseRange.exists_mem_open g hUo hne)

@[to_additive]
theorem dense_of_smul_invariant_transitivePoint {s : Set Œ±} (hs : ‚àÄ c : M, c ‚Ä¢ s ‚äÜ s)
    (hx : ‚àÉ x : Œ±, x ‚àà s ‚àß Dense (MulAction.orbit M x)) : Dense s := by
  rcases hx with ‚ü®x, hxs, hxd‚ü©
  exact Dense.mono (Set.range_subset_iff.mpr (fun c ‚Ü¶ hs c ‚ü®x, hxs, rfl‚ü©)) hxd

@[to_additive]
theorem univ_of_isClosed_smul_invariant_transitivePoint {s : Set Œ±} (hc : IsClosed s)
    (hs : ‚àÄ c : M, c ‚Ä¢ s ‚äÜ s) (hx : ‚àÉ x : Œ±, x ‚àà s ‚àß Dense (MulAction.orbit M x)) : s = univ :=
  hc.closure_eq ‚ñ∏ (dense_of_smul_invariant_transitivePoint M hs hx).closure_eq
